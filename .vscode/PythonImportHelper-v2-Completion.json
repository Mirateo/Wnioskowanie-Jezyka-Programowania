[
    {
        "label": "PickleDB",
        "importPath": "pickledb",
        "description": "pickledb",
        "isExtraImport": true,
        "detail": "pickledb",
        "documentation": {}
    },
    {
        "label": "PickleDB",
        "importPath": "pickledb",
        "description": "pickledb",
        "isExtraImport": true,
        "detail": "pickledb",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "generateDatabase",
        "importPath": "tools.dbService",
        "description": "tools.dbService",
        "isExtraImport": true,
        "detail": "tools.dbService",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "LanguageInferenceSystem",
        "importPath": "InferenceSystem",
        "description": "InferenceSystem",
        "isExtraImport": true,
        "detail": "InferenceSystem",
        "documentation": {}
    },
    {
        "label": "LanguageInferenceSystem",
        "importPath": "InferenceSystem",
        "description": "InferenceSystem",
        "isExtraImport": true,
        "detail": "InferenceSystem",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QListWidgetItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStackedWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QRadioButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "loadUi",
        "importPath": "PyQt5.uic",
        "description": "PyQt5.uic",
        "isExtraImport": true,
        "detail": "PyQt5.uic",
        "documentation": {}
    },
    {
        "label": "EnumUI",
        "importPath": "tools.Enums",
        "description": "tools.Enums",
        "isExtraImport": true,
        "detail": "tools.Enums",
        "documentation": {}
    },
    {
        "label": "EnumLenType",
        "importPath": "tools.Enums",
        "description": "tools.Enums",
        "isExtraImport": true,
        "detail": "tools.Enums",
        "documentation": {}
    },
    {
        "label": "EnumPrType",
        "importPath": "tools.Enums",
        "description": "tools.Enums",
        "isExtraImport": true,
        "detail": "tools.Enums",
        "documentation": {}
    },
    {
        "label": "EnumSize",
        "importPath": "tools.Enums",
        "description": "tools.Enums",
        "isExtraImport": true,
        "detail": "tools.Enums",
        "documentation": {}
    },
    {
        "label": "generateDatabase",
        "kind": 2,
        "importPath": "tools.dbService",
        "description": "tools.dbService",
        "peekOfCode": "def generateDatabase():\n    # Load existing database if exists\n    if os.path.exists(DB_PATH):\n        languagesDB = PickleDB(DB_PATH, auto_dump=True, sig=True)\n        print(f\"Loaded existing database '{DB_PATH}'\")\n        return languagesDB\n    # Create a database instance\n    db = PickleDB(DB_PATH, auto_dump=True, sig=True)\n    # Insert data\n    db.set(",
        "detail": "tools.dbService",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "kind": 5,
        "importPath": "tools.dbService",
        "description": "tools.dbService",
        "peekOfCode": "DB_PATH = './tools/database.db'\n\"\"\"\n    generateDatabase function.\n    This function generates a database of programming languages with their attributes such as\n    language type, modernity, performance, complexity, scalability, popularity, popularity top rank\n    and project type.\n    Returns:\n        PickleDB: The generated database of programming languages.\n\"\"\"\ndef generateDatabase():",
        "detail": "tools.dbService",
        "documentation": {}
    },
    {
        "label": "EnumPrType",
        "kind": 6,
        "importPath": "tools.Enums",
        "description": "tools.Enums",
        "peekOfCode": "class EnumPrType():\n    OTHER = 0\n    DATA_SCIENCE = 1\n    DATABASE = 2\n    DESKTOP = 3\n    GAME = 4\n    MOBILE = 5\n    SCRIPT = 6\n    WEB = 7\n    EMBEDDED = 8",
        "detail": "tools.Enums",
        "documentation": {}
    },
    {
        "label": "EnumUI",
        "kind": 6,
        "importPath": "tools.Enums",
        "description": "tools.Enums",
        "peekOfCode": "class EnumUI():\n    MAIN = 0\n    PR_TYPE = 1\n    FORM = 2\n    EXP = 3\n    RESULTS = 4\n\"\"\"\nEnumLenType class.\nThis class represents an enumeration of language types.\n\"\"\"",
        "detail": "tools.Enums",
        "documentation": {}
    },
    {
        "label": "EnumLenType",
        "kind": 6,
        "importPath": "tools.Enums",
        "description": "tools.Enums",
        "peekOfCode": "class EnumLenType():\n    SCRIPTED = 0\n    COMPILED = 1\n    INTERPRETED = 2\n\"\"\"\nEnumSize class.\nThis class represents an enumeration of size categories.\n\"\"\"\nclass EnumSize():\n    TINY = 0",
        "detail": "tools.Enums",
        "documentation": {}
    },
    {
        "label": "EnumSize",
        "kind": 6,
        "importPath": "tools.Enums",
        "description": "tools.Enums",
        "peekOfCode": "class EnumSize():\n    TINY = 0\n    SMALL = 1\n    REGULAR = 2\n    BIG = 3",
        "detail": "tools.Enums",
        "documentation": {}
    },
    {
        "label": "scrapTiobeIndex",
        "kind": 2,
        "importPath": "tools.scrapTiobe",
        "description": "tools.scrapTiobe",
        "peekOfCode": "def scrapTiobeIndex():\n    url = \"https://www.tiobe.com/tiobe-index/\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        soup = BeautifulSoup(response.text, 'html.parser')\n        language_rows = soup.select('.table-top20 tr')\n        popularity = {}\n        for row in language_rows[1:]:  # Skip the header row\n            columns = row.select('td')\n            if len(columns) >= 3:  # Ensure there are enough columns",
        "detail": "tools.scrapTiobe",
        "documentation": {}
    },
    {
        "label": "LanguageInferenceSystem",
        "kind": 6,
        "importPath": "InferenceSystem",
        "description": "InferenceSystem",
        "peekOfCode": "class LanguageInferenceSystem:\n    languagesDB: PickleDB\n    userData = {\"projectType\": None,\n                \"modernity\": None,\n                \"performance\": None,\n                \"complexity\": None,\n                \"scalability\": None,\n                \"popularity\": None,\n                \"experienced\": None,\n                \"lenType\": None,",
        "detail": "InferenceSystem",
        "documentation": {}
    },
    {
        "label": "system",
        "kind": 2,
        "importPath": "testInferenceSystem",
        "description": "testInferenceSystem",
        "peekOfCode": "def system():\n    return LanguageInferenceSystem()\ndef test_calculateScore(system):\n    # Arrange\n    system.userData = {\n        \"projectType\": 1,\n        \"modernity\": 0.6,\n        \"performance\": 0.6,\n        \"complexity\": 2,\n        \"scalability\": 0.6,",
        "detail": "testInferenceSystem",
        "documentation": {}
    },
    {
        "label": "test_calculateScore",
        "kind": 2,
        "importPath": "testInferenceSystem",
        "description": "testInferenceSystem",
        "peekOfCode": "def test_calculateScore(system):\n    # Arrange\n    system.userData = {\n        \"projectType\": 1,\n        \"modernity\": 0.6,\n        \"performance\": 0.6,\n        \"complexity\": 2,\n        \"scalability\": 0.6,\n        \"popularity\": 1,\n        \"experienced\": True,",
        "detail": "testInferenceSystem",
        "documentation": {}
    },
    {
        "label": "test_calculateScore_max",
        "kind": 2,
        "importPath": "testInferenceSystem",
        "description": "testInferenceSystem",
        "peekOfCode": "def test_calculateScore_max(system):\n    # Arrange\n    system.userData = {\n        \"projectType\": 1,\n        \"modernity\": 1,\n        \"performance\": 1,\n        \"complexity\": 1,\n        \"scalability\": 1,\n        \"popularity\": 1,\n        \"experienced\": True,",
        "detail": "testInferenceSystem",
        "documentation": {}
    },
    {
        "label": "test_calculateScore_min",
        "kind": 2,
        "importPath": "testInferenceSystem",
        "description": "testInferenceSystem",
        "peekOfCode": "def test_calculateScore_min(system):\n    # Arrange\n    system.userData = {\n        \"projectType\": 1,\n        \"modernity\": 1,\n        \"performance\": 1,\n        \"complexity\": 1,\n        \"scalability\": 1,\n        \"popularity\": 1,\n        \"experienced\": True,",
        "detail": "testInferenceSystem",
        "documentation": {}
    },
    {
        "label": "test_parseLanguage_sunny",
        "kind": 2,
        "importPath": "testInferenceSystem",
        "description": "testInferenceSystem",
        "peekOfCode": "def test_parseLanguage_sunny(system):\n    # Arrange\n    index = 1\n    language = \"Python\"\n    # Act\n    result = system.parseLanguage(index, language)\n    # Assert\n    assert isinstance(result, str)\n    assert result.startswith(f\"{index}. {language}\\n\"\n        \"\\tTOP#1 in January 2024, type: interpreted, modernity: 9/10, performance: 8/10, scalability:7/10,\\n\"",
        "detail": "testInferenceSystem",
        "documentation": {}
    },
    {
        "label": "test_parseLanguage_rainy",
        "kind": 2,
        "importPath": "testInferenceSystem",
        "description": "testInferenceSystem",
        "peekOfCode": "def test_parseLanguage_rainy(system):\n    # Arrange\n    index = 1\n    language = \"Polish\"\n    # Act and Assert\n    with pytest.raises(TypeError) as e:\n        result = system.parseLanguage(index, language)\n    assert str(e.value) == \"'bool' object is not subscriptable\"",
        "detail": "testInferenceSystem",
        "documentation": {}
    },
    {
        "label": "AppWindow",
        "kind": 6,
        "importPath": "WnioskowanieJezyka",
        "description": "WnioskowanieJezyka",
        "peekOfCode": "class AppWindow(QMainWindow):\n    def __init__(self):\n        super(AppWindow, self).__init__()\n        self.system = LanguageInferenceSystem()\n        self.setFixedSize(810, 600)\n        self.setWindowTitle(\"System Wnioskowania Optymalnego Języka Programowania\")\n        # Create a stacked widget to hold the different UIs\n        self.stacked_widget = QStackedWidget(self)\n        # Load UIs from the files\n        mainUi = loadUi('UIfiles/main.ui')",
        "detail": "WnioskowanieJezyka",
        "documentation": {}
    }
]